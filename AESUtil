package com.baidu.hi.aiminutes.common.util;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class AESUtil {

    public static final String KEY_AES = "AES";
    public static final String KEY_MD5 = "MD5";
    private static MessageDigest md5Digest;

    static {
        try {
            md5Digest = MessageDigest.getInstance(KEY_MD5);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
    /**
     * 加密
     */
    public static String encrypt(String data, String key)throws Exception {
        return doAES(data, key, Cipher.ENCRYPT_MODE);
    }

    /**
     * 解密
     */
    public static String decrypt(String data, String key)throws Exception {
        return doAES(data, key, Cipher.DECRYPT_MODE);
    }

    private static String doAES(String data, String key, int mode) throws Exception {
        try {
            boolean encrypt = mode == Cipher.ENCRYPT_MODE;
            byte[] content;
            if (encrypt) {
                content = data.getBytes(StandardCharsets.UTF_8);
            } else {
                content = Base64.getDecoder().decode(data);
            }
            SecretKeySpec keySpec = new SecretKeySpec(md5Digest.digest(key.getBytes(StandardCharsets.UTF_8)), KEY_AES);
            Cipher cipher = Cipher.getInstance(KEY_AES); // 创建密码器
            cipher.init(mode, keySpec);
            byte[] result = cipher.doFinal(content);
            if (encrypt) {
                return new String(Base64.getEncoder().encode(result), StandardCharsets.UTF_8);
            } else {
                return new String(result, StandardCharsets.UTF_8);
            }
        } catch (Exception e) {
            throw e;
        }
    }


}
